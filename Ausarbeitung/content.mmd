Base Header Level:  3
latex input:        document-info
latex footer:       x3-paper-end



# Introduction

<!--\citet{Campeanu2013}--> states that nowadays it is more common to build embedded systems on heterogenous platforms, containing multiple computational units such as multi-core CPUs, GPUs and FPGAs. If all these components are used to the full extent of their capabilities, such a setup enables better performance than could be previously achieved on embedded platforms.

This is an important shift, since applications running on these platforms become more and more complex, and their performance requirements have to be satisfied. In the past, not only on embedded platforms, this was commonly achieved by boosting processor clock rates. But due to both intractable physical limitations as well as practical engineering conditions, increasing processor clock rates is no longer feasible <!--\citep{Cantrill2008}-->.

The peformance gains possible on heterogenous platforms are a result of the hardware-level parallelism that is achievable on these platforms. But unfortunately, exploiting these parallelism features still is a considerable challenge, given the tools and programming concepts widely in use today <!--\citep{Wang2013,Cantrill2008}-->.

In this essay, a number of techniques that allow the exploitation of different parallelism concepts will be explained. Additionally, their importance in the context of embedded application development will be evaluated based on current research.

Embedded platforms and applications are being used throughout many industries, including telecommunication, robotics, medical and automotive <!--\citep{Wang2013}-->. <!--\todo{bla bla importance}-->


# Techniques

<!--\citet{Flynn1972}--> states that there are two broad categories of architectures that operate on multiple data simultaneously, namely "Single instruction, multiple data" (SIMD) and "Multiple instruction, multiple data" (MIMD).

MIMD architectures include multiprocessor systems, and as such are almost universally available in todays desktop computers, and increasingly available on embedded platforms. Furthermore, many modern multi-core microprocessors feature SIMD subsystems, such as Intel's SSE extensions, and



## Pipeline Pattern



## SIMD

An SIMD architecture is one that, given a stream of data, operates on multiple items of that stream for every instruction.

* Mention GPU stuff (OpenCL) somewhere

Single instruction, multiple data (SIMD) techniques




# Conclusion

Komprimierte Darstellung der wesentlichen Inhalte



## Outlook

Ausblick (wie geht es weiter?)




# Bla bla

* Einleitung
    * Thema und dessen Anwendungsfeld bzw. dessen perspektivische Nutzung zur Unterstützung der Motivation.
    * Ziele der Dokumentation und Abgrenzung.
    * Schwerpunkte der Dokumentation.
    * Übersicht zu den einzelnen Kapiteln, sodass der rote Faden zu den Zielvorstellungen deutlich wird.
* Hauptteil
    * Praktischen oder ggf. wissenschaftlichen Relevanz des Themas
    * Die Begründung für die Struktur und Inhalte der folgenden Kapitel soll vermittelt
    werden.
    * Die Position der Einzelkapitel im Rahmen der Gesamtdarstellung mit deren
    * Bedeutung für den Themenschwerpunkt ist zu verdeutlichen.
    * Jedes Kapitel beginnt mit einer Übersicht zu den zu erwartenden Beiträgen. Fakten, Begründungen, Implikationen und Alternativenvergleiche sind im Vorrang zu Bewertungen und Stellungnahmen zu behandeln.
    * Diskussion der Literatur
    * Die beabsichtigten weiteren Recherchen, theoretischen Analysen, zu erstellende Konzepte und Implementierungen sind zu skizzieren. Eine Einordnung und Gewichtung des im Vortrag behandelten Themas in die voraussichtliche Masterarbeit ist anzustreben.


<!--
% Bibliography
{\footnotesize
    \bibliography{bibliography}
}
-->
