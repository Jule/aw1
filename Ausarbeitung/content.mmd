Base Header Level:  3
latex input:        document-info
latex footer:       x3-paper-end

# Introduction

As modern embedded applications evolve, their performance requirements increase. Due to the limitations of embedded platforms, such as constraints in power consumption and heat dissipation, these increased performance requirements cannot be met by increasing processor clock rates. Consequently, modern embedded processors, such as the Dual Core ARM Cortex-A9 shipped on the Xilinx Zynq platform, do not only feature more than a single processing core, but also provide support for hardware level parallelism.

In this essay, a number of techniques that allow the exploitation of different parallelism concepts will be explained. Additionally, their importance in the context of embedded application development will be evaluated based on current research.



# Techniques

<!--\citet{Flynn1972}--> states that there are two broad categories of architectures that operate on multiple data simultaneously, namely "Single instruction, multiple data" (SIMD) and "Multiple instruction, multiple data" (MIMD).

MIMD architectures include multiprocessor systems, and as such are almost universally available in todays desktop computers, and increasingly available on embedded platforms. Furthermore, many modern multi-core microprocessors feature SIMD subsystems, such as Intel's SSE extensions, and



## Pipeline Pattern



## SIMD

An SIMD architecture is one that, given a stream of data, operates on multiple items of that stream for every instruction.

* Mention GPU stuff (OpenCL) somewhere

Single instruction, multiple data (SIMD) techniques



<!--
% Bibliography
{\footnotesize
    \bibliography{bibliography}
}
-->
